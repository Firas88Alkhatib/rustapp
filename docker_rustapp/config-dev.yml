version: "3.9"
services:
  # main service
  rustmain:
    container_name: RustMainService
    build:
      context: ../main/
      dockerfile: ../docker_rustapp/Dockerfile
    ports:
      - 8080:8080
    working_dir: /app
    volumes:
      - ../main:/app/
      - /app/target
      - ./wait_for_db.sh:/utils/wait_for_db.sh
    # cargo watch is very slow in docker
    # command: sh -c "diesel migration run && cargo watch -q -c -x run"
    command: sh -c "/utils/wait_for_db.sh MainDb 5432 && diesel migration run && cargo run"
    environment:
      - DATABASE_URL=postgres://mainUser:mainPassword@MainDb/rustMain
      - PRODUCTS_URL=http://RustProductsService:5001/products
    depends_on:
      - main-db
      # main-db:
      #   condition: service_healthy
    networks:
      - rustapp-network
  main-db:
    container_name: MainDb
    image: postgres
    environment:
      - POSTGRES_USER=mainUser
      - POSTGRES_PASSWORD=mainPassword
      - POSTGRES_DB=rustMain
    # healthcheck:
    #   test: ["CMD-SHELL", "pg_isready -U mainUser -d rustMain"]
    #   interval: 10s
    #   timeout: 5s
    #   retries: 5
    networks:
      - rustapp-network
  # products service
  rustproducts:
    container_name: RustProductsService
    build:
      context: ../products/
      dockerfile: ../docker_rustapp/Dockerfile
    ports:
      - 5001:5001
    working_dir: /app
    volumes:
      - ../products:/app/
      - /app/target
      - ./wait_for_db.sh:/utils/wait_for_db.sh
    # cargo watch is very slow in docker
    # command: sh -c "diesel migration run && cargo watch -q -c -x run"
    command: sh -c "/utils/wait_for_db.sh ProductsDb 5432 && diesel migration run && cargo run"
    environment:
      - DATABASE_URL=postgres://productsUser:productsPassword@ProductsDb/rustProducts
    depends_on:
      - products-db
      # products-db:
      #   condition: service_healthy
    networks:
      - rustapp-network
  products-db:
    container_name: ProductsDb
    image: postgres
    environment:
      - POSTGRES_USER=productsUser
      - POSTGRES_PASSWORD=productsPassword
      - POSTGRES_DB=rustProducts
    # healthcheck:
    #   test: ["CMD-SHELL", "pg_isready -U productsUser -d rustProducts"]
    #   interval: 10s
    #   timeout: 5s
    #   retries: 5
    networks:
      - rustapp-network
networks:
  rustapp-network:
    driver: bridge
